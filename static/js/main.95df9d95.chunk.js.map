{"version":3,"sources":["components/App/logo.svg","components/Loading/Loading.tsx","components/Traders/TraderElement/TraderElement.tsx","components/Traders/TradersList/TradersList.tsx","store/ducks/traders/actions.ts","store/createAsyncAction.ts","components/Traders/TradersContainer.tsx","serviceWorker.ts","store/ducks/traders/reducers.ts","store/rootReducer.ts","api/apiClient.ts","api/traders.ts","saga/traders/sagas.ts","saga/rootSaga.ts","store/store.ts","index.tsx","components/App/App.tsx"],"names":["module","exports","Loading","TraderElement","trader","name","TradersList","traders","length","map","key","id","fetchTradersAction","type","loadingType","successType","errorType","start","payload","setLoading","setSuccess","setError","e","error","code","createAsyncAction","TradersContainer","dispatch","useDispatch","useSelector","state","tradersReducer","fetchTraders","useCallback","useEffect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initialState","isLoading","action","rootReducer","combineReducers","apiClient","axios","create","baseURL","process","REACT_APP_API_URL","responseType","headers","fetchTradersApiCall","a","get","response","data","listeners","put","call","takeLatest","rootSaga","all","fork","traderListeners","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","className","src","logo","alt","onClick","href","target","rel","document","getElementById","URL","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.95df9d95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nexport const Loading: React.FC = () => <div>Loading..</div>;\n","import React from 'react'\nimport { ITrader } from 'src/api/traders'\n\ninterface Props {\n  trader: ITrader\n}\n\nexport const TraderElement: React.FC<Props> = ({ trader }) => {\n  return <div>{trader.name}</div>\n}\n","import React from 'react'\nimport { TraderElement, Loading } from '../../'\nimport { ITrader } from 'src/api/traders'\n\ninterface Props {\n  traders: ITrader[]\n}\n\nexport const TradersList: React.FC<Props> = ({ traders }) => {\n  const renderList = () =>\n    traders.map((trader: ITrader) => <TraderElement key={trader.id} trader={trader} />)\n\n  return traders.length === 0 ? <Loading /> : <>{renderList()}</>\n}\n","import { ITrader } from 'src/api/traders'\nimport createAsyncAction from '../../createAsyncAction'\n\nexport const fetchTradersAction = createAsyncAction<null, ITrader[]>('FETCH_TRADERS')\n","interface ErrorInterface {\n  error: string\n  code?: number\n}\n\nexport type ActionType<T> = { type: string; payload: T }\ntype ActionGenaratorType<T> = (payload: T) => ActionType<T>\ntype ErrorActionGenaratorType = (e: ErrorInterface) => ActionType<ErrorInterface>\n\nexport interface AsyncAction<T1, T2> {\n  start: ActionGenaratorType<T1>\n  setLoading: () => { type: string }\n  setSuccess: ActionGenaratorType<T2>\n  setError: ErrorActionGenaratorType\n  type: string\n  loadingType: string\n  successType: string\n  errorType: string\n}\n\nexport default function createAsyncAction<T1, T2>(type: string): AsyncAction<T1, T2> {\n  const loadingType = `${type}__LOADING`\n  const successType = `${type}__SUCCESS`\n  const errorType = `${type}__ERROR`\n\n  const start: ActionGenaratorType<T1> = payload => ({ type, payload })\n  const setLoading = (): { type: string } => ({ type: loadingType })\n  const setSuccess: ActionGenaratorType<T2> = payload => ({\n    type: successType,\n    payload,\n  })\n  const setError: ErrorActionGenaratorType = e => ({\n    type: errorType,\n    payload: {\n      error: e.error,\n      code: e.code,\n    },\n  })\n\n  return {\n    start,\n    setLoading,\n    setSuccess,\n    setError,\n    type,\n    loadingType,\n    successType,\n    errorType,\n  }\n}\n","import React, { useEffect, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { TradersList } from './TradersList/TradersList'\nimport { ITrader } from 'src/api/traders'\nimport { fetchTradersAction } from 'src/store/ducks/traders/actions'\nimport { IStoreState } from 'src/store/rootReducer'\n\nconst TradersContainer: React.FC = () => {\n  const dispatch = useDispatch()\n  const traders = useSelector<IStoreState, ITrader[]>(state => state.tradersReducer.traders)\n\n  const fetchTraders = useCallback(() => {\n    dispatch(fetchTradersAction.start(null))\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchTraders()\n  }, [fetchTraders])\n\n  return <TradersList traders={traders} />\n}\n\nexport default TradersContainer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ITrader } from 'src/api/traders'\nimport { fetchTradersAction } from './actions'\n\nexport interface ITradersState {\n  traders: ITrader[]\n  error: string\n  isLoading: boolean\n}\n\nexport const initialState: ITradersState = {\n  traders: [],\n  error: '',\n  isLoading: false,\n}\n\ninterface ErrorData {\n  error: string\n}\n\nconst tradersReducer = (\n  state: ITradersState = initialState,\n  action: {\n    type: string\n    payload?: ITrader[] | ErrorData\n  }\n): ITradersState => {\n  switch (action.type) {\n    case fetchTradersAction.loadingType:\n      return { ...state, isLoading: true }\n    case fetchTradersAction.successType: {\n      return { ...initialState, traders: action.payload as ITrader[] }\n    }\n    case fetchTradersAction.errorType: {\n      const { error } = action.payload as ErrorData\n      return {\n        ...state,\n        error,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport default tradersReducer\n","import { combineReducers } from 'redux'\n\nimport tradersReducer, { ITradersState } from './ducks/traders/reducers'\n\nexport interface IStoreState {\n  tradersReducer: ITradersState\n}\n\nexport const rootReducer = combineReducers<IStoreState>({\n  tradersReducer,\n})\n","import axios from 'axios'\n\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'https://jsonplaceholder.typicode.com',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\nexport default apiClient\n","import apiClient from './apiClient'\n\nexport interface ITrader {\n  id: number\n  name: string\n  username: string\n  email: string\n  address: any\n  phone: string\n  website: string\n  company: any\n}\n\nexport const fetchTradersApiCall = async (): Promise<ITrader[]> => {\n  const response = await apiClient.get<ITrader[]>('/users')\n  return response.data\n}\n","import { Action } from 'redux'\nimport { takeLatest, call, put, CallEffect, PutEffect, ForkEffect } from 'redux-saga/effects'\n\nimport { fetchTradersApiCall } from 'src/api'\nimport { fetchTradersAction } from 'src/store/ducks/traders/actions'\nimport { ITrader } from 'src/api/traders'\n\nfunction* fetchTraders(): Generator<CallEffect | PutEffect<Action>> {\n  try {\n    yield put(fetchTradersAction.setLoading())\n    const traders = yield call(fetchTradersApiCall)\n    yield put(fetchTradersAction.setSuccess(traders as ITrader[]))\n  } catch (err) {\n    yield put(fetchTradersAction.setError({ error: 'error in fetch traders' }))\n  }\n}\n\nexport default function* listeners(): IterableIterator<ForkEffect> {\n  yield takeLatest(fetchTradersAction.type, fetchTraders)\n}\n","import { all, fork } from 'redux-saga/effects'\nimport traderListeners from './traders/sagas'\n\nexport function* rootSaga() {\n  yield all([fork(traderListeners)])\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { rootReducer } from './rootReducer';\nimport { rootSaga } from '../saga/rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport './index.css'\nimport { App } from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport { TradersContainer } from '../../components'\n\nexport const App: React.FC = () => {\n  const handleClick = () => {\n    console.log('Hi')\n    console.log(\n      'new GreetingServiceImp().currentGreeting()'\n      // new GreetingServiceImp().currentGreeting()\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p onClick={handleClick}>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <TradersContainer />\n    </div>\n  )\n}\n"],"sourceRoot":""}